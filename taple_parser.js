/* parser generated by jison 0.4.2 */
var taple_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Sep":3,"SEP":4,"ProgStart":5,"ProgEnd":6,"Prog":7,"UnamedExprSeq":8,"EOF":9,"Ref":10,"SYMBOL":11,"LAMBDA":12,".":13,"Expr":14,"SymbolSeq":15,"SymbolList":16,"LB0":17,"RB0":18,"LB1":19,"RB1":20,"LB2":21,"RB2":22,"NamedExprSeq":23,":":24,"SExprSeq":25,"SetSeq":26,"BeginSeq":27,"IfSeq":28,"LambdaSeq":29,"IF":30,"UnnamedLambdaDef":31,"NamedLambdaDef":32,"SET":33,"BEGIN":34,"Number":35,"ZERO":36,"HEXINT":37,"OCTINT":38,"DECINT":39,"REALNUMBER":40,"STRING":41,"QUOTE":42,"$accept":0,"$end":1},
terminals_: {2:"error",4:"SEP",9:"EOF",11:"SYMBOL",12:"LAMBDA",13:".",17:"LB0",18:"RB0",19:"LB1",20:"RB1",21:"LB2",22:"RB2",24:":",30:"IF",33:"SET",34:"BEGIN",36:"ZERO",37:"HEXINT",38:"OCTINT",39:"DECINT",40:"REALNUMBER",41:"STRING",42:"QUOTE"},
productions_: [0,[3,0],[3,1],[5,1],[6,1],[7,4],[10,1],[10,3],[10,3],[15,1],[15,3],[16,2],[16,2],[16,2],[16,3],[16,3],[16,3],[8,1],[8,3],[23,4],[23,6],[25,1],[25,3],[25,1],[25,1],[25,1],[25,1],[28,7],[31,3],[32,5],[29,3],[29,3],[26,5],[27,3],[35,1],[35,1],[35,1],[35,1],[35,1],[14,1],[14,1],[14,1],[14,1],[14,3],[14,3],[14,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 3: scopes = []; scope_refs = {}; 
break;
case 5: this.$ = { type: 'Begin', exps: $$[$0-2] }; return this.$; 
break;
case 6: 
                     var idx = scopes.length == 0 ?
                         -1 : scopes[scopes.length - 1].indexOf($$[$0]);
                     if (idx >= 0) 
                        this.$ = { type: 'LexicalRef', name: $$[$0], index: idx };
                     else if ($$[$0] in scope_refs) {
                        var s = scope_refs[$$[$0]];
                        this.$ = { type: 'ScopeRef', name: $$[$0], index: s[s.length - 1] };
                     }
                     else
                     {
                        this.$ = { type: 'LiteralRef', name: $$[$0] };
                     }
                   
break;
case 7:
                     if ($$[$0] in scope_refs) {
                          var s = scope_refs[$$[$0]];
                          this.$ = { type: 'LambdaRef', name: $$[$0], index: s[s.length - 1] };
                     }
                     else
                     {
                          this.$ = { type: 'Error', msg: 'Invalid lambda reference: ' + $$[$0] + '.' };
                     }
                   
break;
case 8: this.$ = { type: 'LookupRef', base: $$[$0-2], name: $$[$0] }; 
break;
case 9: this.$ = [ $$[$0] ]; 
break;
case 10: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 11: this.$ = []; 
break;
case 12: this.$ = []; 
break;
case 13: this.$ = []; 
break;
case 14: this.$ = $$[$0-1] 
break;
case 15: this.$ = $$[$0-1] 
break;
case 16: this.$ = $$[$0-1] 
break;
case 17: this.$ = [ $$[$0] ]; 
break;
case 18: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 19: this.$ = new Object(); this.$[$$[$0-2]] = $$[$0]; 
break;
case 20: this.$ = $$[$0-5]; $$[$0-5][$$[$0-2]] = $$[$0]; 
break;
case 21: this.$ = { type: 'Apply', seq: $$[$0] }; 
break;
case 22: this.$ = { type: 'Apply', seq: $$[$0-2], table: $$[$0]  }; 
break;
case 27: this.$ = { type: 'Branch', condition: $$[$0-4],
                            then_branch: $$[$0-2],
                            else_branch: $$[$0] }; 
break;
case 28: 
                     scopes.push($$[$0]);
                     this.$ = $$[$0];
                   
break;
case 29:
                     scopes.push($$[$0]); 
                     if (!($$[$0-2] in scope_refs))
                        scope_refs[$$[$0-2]] = [];
                     scope_refs[$$[$0-2]].push(scopes.length - 1);
                     this.$ = [ $$[$0-2], $$[$0] ];
                   
break;
case 30: scopes.pop();
                     this.$ = { type: 'Lambda', 
                            depth: scopes.length,
                            args: $$[$0-2], body:
                            { type: 'Begin', exps: $$[$0] }
                            }; 
break;
case 31: scopes.pop(); scope_refs[$$[$0-2][0]].pop();
                     this.$ = { type: 'Lambda', 
                            depth: scopes.length,
                            args: $$[$0-2][1], body:
                            { type: 'Begin', exps: $$[$0] }
                          }; 
break;
case 32: if ($$[$0-2].type == 'LiteralRef')
                        this.$ = { type: 'LiteralSet', ref: $$[$0-2], value: $$[$0] };
                     else if ($$[$0-2].type == 'ScopeRef')
                        this.$ = { type: 'Error', msg: 'Cannot set the scope reference: ' + $$[$0-2].name + '.' };
                     else if ($$[$0-2].type == 'LambdaRef')
                        this.$ = { type: 'Error', msg: 'Cannot set the lambda reference: ' + $$[$0-2].name + '.' };
                     else this.$ = { type: 'Set', ref: $$[$0-2], value: $$[$0] };
                   
break;
case 33: this.$ = { type: 'Begin', exps: $$[$0] }; 
break;
case 34: this.$ = { type: 'Integer', value: 0 } 
break;
case 35: this.$ = { type: 'Integer', value: parseInt($$[$0],16) } 
break;
case 36: this.$ = { type: 'Integer', value: parseInt($$[$0],8) } 
break;
case 37: this.$ = { type: 'Integer', value: Number($$[$0]) } 
break;
case 38: this.$ = { type: 'RealNumber', value: Number($$[$0]) } 
break;
case 41: this.$ = { type: 'String', value: $$[$0] }; 
break;
case 42: this.$ = { type: 'Quote', value: $$[$0] }; 
break;
case 43: this.$ = $$[$0-1]; 
break;
case 44: this.$ = $$[$0-1]; 
break;
case 45: this.$ = $$[$0-1]; 
break;
}
},
table: [{3:3,4:[1,4],5:2,7:1,11:[2,1],12:[2,1],17:[2,1],19:[2,1],21:[2,1],36:[2,1],37:[2,1],38:[2,1],39:[2,1],40:[2,1],41:[2,1],42:[2,1]},{1:[3]},{8:5,10:7,11:[1,14],12:[1,15],14:6,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{11:[2,3],12:[2,3],17:[2,3],19:[2,3],21:[2,3],36:[2,3],37:[2,3],38:[2,3],39:[2,3],40:[2,3],41:[2,3],42:[2,3]},{11:[2,2],12:[2,2],17:[2,2],19:[2,2],21:[2,2],36:[2,2],37:[2,2],38:[2,2],39:[2,2],40:[2,2],41:[2,2],42:[2,2]},{3:23,4:[1,22],6:21,9:[2,1]},{4:[2,17],9:[2,17],13:[1,24],18:[2,17],20:[2,17],22:[2,17]},{4:[2,39],9:[2,39],13:[2,39],18:[2,39],20:[2,39],22:[2,39]},{4:[2,40],9:[2,40],13:[2,40],18:[2,40],20:[2,40],22:[2,40]},{4:[2,41],9:[2,41],13:[2,41],18:[2,41],20:[2,41],22:[2,41]},{4:[2,42],9:[2,42],13:[2,42],18:[2,42],20:[2,42],22:[2,42]},{8:26,10:7,11:[1,14],12:[1,36],14:6,17:[1,11],19:[1,12],21:[1,13],25:25,26:27,27:28,28:29,29:30,30:[1,33],31:34,32:35,33:[1,31],34:[1,32],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{8:26,10:7,11:[1,14],12:[1,36],14:6,17:[1,11],19:[1,12],21:[1,13],25:37,26:27,27:28,28:29,29:30,30:[1,33],31:34,32:35,33:[1,31],34:[1,32],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{8:26,10:7,11:[1,14],12:[1,36],14:6,17:[1,11],19:[1,12],21:[1,13],25:38,26:27,27:28,28:29,29:30,30:[1,33],31:34,32:35,33:[1,31],34:[1,32],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{4:[2,6],9:[2,6],13:[2,6],18:[2,6],20:[2,6],22:[2,6]},{13:[1,39]},{4:[2,34],9:[2,34],13:[2,34],18:[2,34],20:[2,34],22:[2,34]},{4:[2,35],9:[2,35],13:[2,35],18:[2,35],20:[2,35],22:[2,35]},{4:[2,36],9:[2,36],13:[2,36],18:[2,36],20:[2,36],22:[2,36]},{4:[2,37],9:[2,37],13:[2,37],18:[2,37],20:[2,37],22:[2,37]},{4:[2,38],9:[2,38],13:[2,38],18:[2,38],20:[2,38],22:[2,38]},{9:[1,40]},{9:[2,2],10:7,11:[1,14],12:[1,15],14:41,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{9:[2,4]},{11:[1,42]},{18:[1,43]},{4:[1,44],18:[2,21],20:[2,21],22:[2,21]},{18:[2,23],20:[2,23],22:[2,23]},{18:[2,24],20:[2,24],22:[2,24]},{18:[2,25],20:[2,25],22:[2,25]},{18:[2,26],20:[2,26],22:[2,26]},{4:[1,45]},{4:[1,46]},{4:[1,47]},{4:[1,48]},{4:[1,49]},{4:[1,50],13:[1,39]},{20:[1,51]},{22:[1,52]},{11:[1,53]},{1:[2,5]},{4:[2,18],9:[2,18],13:[1,24],18:[2,18],20:[2,18],22:[2,18]},{4:[2,8],9:[2,8],13:[2,8],18:[2,8],20:[2,8],22:[2,8]},{4:[2,43],9:[2,43],13:[2,43],18:[2,43],20:[2,43],22:[2,43]},{10:7,11:[1,14],12:[1,15],14:41,17:[1,11],19:[1,12],21:[1,13],23:54,24:[1,55],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{10:56,11:[1,14],12:[1,15],14:57,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{8:58,10:7,11:[1,14],12:[1,15],14:6,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{10:7,11:[1,14],12:[1,15],14:59,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{8:60,10:7,11:[1,14],12:[1,15],14:6,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{8:61,10:7,11:[1,14],12:[1,15],14:6,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{11:[1,63],16:62,17:[1,64],19:[1,65],21:[1,66]},{4:[2,44],9:[2,44],13:[2,44],18:[2,44],20:[2,44],22:[2,44]},{4:[2,45],9:[2,45],13:[2,45],18:[2,45],20:[2,45],22:[2,45]},{4:[2,7],9:[2,7],13:[2,7],18:[2,7],20:[2,7],22:[2,7]},{4:[1,67],18:[2,22],20:[2,22],22:[2,22]},{11:[1,68]},{4:[1,69],13:[2,39]},{13:[1,24]},{4:[1,70],18:[2,33],20:[2,33],22:[2,33]},{4:[1,71],13:[1,24]},{4:[1,70],18:[2,30],20:[2,30],22:[2,30]},{4:[1,70],18:[2,31],20:[2,31],22:[2,31]},{4:[2,28]},{4:[1,72]},{11:[1,75],15:74,18:[1,73]},{11:[1,75],15:77,20:[1,76]},{11:[1,75],15:79,22:[1,78]},{24:[1,80]},{4:[1,81]},{10:7,11:[1,14],12:[1,15],14:82,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{10:7,11:[1,14],12:[1,15],14:41,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{10:7,11:[1,14],12:[1,15],14:83,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{16:84,17:[1,64],19:[1,65],21:[1,66]},{4:[2,11]},{4:[1,86],18:[1,85]},{4:[2,9],18:[2,9],20:[2,9],22:[2,9]},{4:[2,12]},{4:[1,86],20:[1,87]},{4:[2,13]},{4:[1,86],22:[1,88]},{11:[1,89]},{10:7,11:[1,14],12:[1,15],14:90,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{13:[1,24],18:[2,32],20:[2,32],22:[2,32]},{4:[1,91],13:[1,24]},{4:[2,29]},{4:[2,14]},{11:[1,92]},{4:[2,15]},{4:[2,16]},{4:[1,93]},{4:[2,19],13:[1,24],18:[2,19],20:[2,19],22:[2,19]},{10:7,11:[1,14],12:[1,15],14:94,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{4:[2,10],18:[2,10],20:[2,10],22:[2,10]},{10:7,11:[1,14],12:[1,15],14:95,17:[1,11],19:[1,12],21:[1,13],35:8,36:[1,16],37:[1,17],38:[1,18],39:[1,19],40:[1,20],41:[1,9],42:[1,10]},{13:[1,24],18:[2,27],20:[2,27],22:[2,27]},{4:[2,20],13:[1,24],18:[2,20],20:[2,20],22:[2,20]}],
defaultActions: {23:[2,4],40:[2,5],62:[2,28],73:[2,11],76:[2,12],78:[2,13],84:[2,29],85:[2,14],87:[2,15],88:[2,16]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* generated by jison-lex 0.1.0 */
var lexer = (function(){
var lexer = {
EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* comment */ 
break;
case 1: return 33; 
break;
case 2: return 12; 
break;
case 3: return 30; 
break;
case 4: return 34; 
break;
case 5: return 37; 
break;
case 6: return 38; 
break;
case 7: return 36; 
break;
case 8: return 40; 
break;
case 9: return 39; 
break;
case 10: return 11; 
break;
case 11: return 41; 
break;
case 12: return 42; 
break;
case 13: return 24; 
break;
case 14: return 13; 
break;
case 15: return 17; 
break;
case 16: return 18; 
break;
case 17: return 19; 
break;
case 18: return 20; 
break;
case 19: return 21; 
break;
case 20: return 22; 
break;
case 21: return 4; 
break;
case 22: return 9; 
break;
}
},
rules: [/^(?:[\s]*;[^\n]*)/,/^(?:set!)/,/^(?:lambda\b)/,/^(?:if\b)/,/^(?:begin\b)/,/^(?:0x[0-9a-fA-F]+)/,/^(?:0[0-7]*)/,/^(?:[+\-]0+)/,/^(?:[+\-]?[0-9]*\.[0-9]+)/,/^(?:[+\-]?[1-9][0-9]*)/,/^(?:([a-zA-Z!@#$%\^&*_\-+=])([a-zA-Z0-9!@#$%\^&*_\-+=])*)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:'([a-zA-Z0-9!@#$%\^&*_\-+=])+)/,/^(?::)/,/^(?:\.)/,/^(?:\([\s]*)/,/^(?:[\s]*\))/,/^(?:\[[\s]*)/,/^(?:[\s]*\])/,/^(?:\{[\s]*)/,/^(?:[\s]*\})/,/^(?:[\s\n]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = taple_parser;
exports.Parser = taple_parser.Parser;
exports.parse = function () { return taple_parser.parse.apply(taple_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}